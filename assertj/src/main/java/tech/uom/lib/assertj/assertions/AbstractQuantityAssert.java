/*
 * Units of Measurement AssertJ Library
 * Copyright (c) 2005-2021, Werner Keil and others.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions
 *    and the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of JSR-385, Indriya nor the names of their contributors may be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package tech.uom.lib.assertj.assertions;

import javax.measure.Quantity;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;
import tech.units.indriya.function.Calculus;

/**
 * Abstract base class for {@link Quantity} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractQuantityAssert<S extends AbstractQuantityAssert<S, A>, A extends Quantity> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractQuantityAssert}</code> to make assertions on actual Quantity.
     *
     * @param actual the Quantity we want to make assertions on.
     */
    protected AbstractQuantityAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual Quantity's unit is equal to the given one.
     *
     * @param unit the given unit to compare the actual Quantity's unit to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Quantity's unit is not equal to the given one.
     */
    public S hasUnit(javax.measure.Unit unit) {
        // check that actual Quantity we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting unit of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        javax.measure.Unit actualUnit = actual.getUnit();
        if (!Objects.areEqual(actualUnit, unit)) {
            failWithMessage(assertjErrorMessage, actual, unit, actualUnit);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Quantity's value is numerically equal to the given one.
     *
     * @param value the given value to compare the actual Quantity's value to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Quantity's value is not numerically equal to the given one.
     */
    public S hasValue(Number value) {
        // check that actual Quantity we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting value of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Number actualValue = actual.getValue();
        if (!equals(actualValue, value)) {
            failWithMessage(assertjErrorMessage, actual, value, actualValue);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Returns {@code true} if the arguments are numerically equal to each other, {@code false} otherwise.
     */
    private boolean equals(Number x, Number y) {
        if (Objects.areEqual(x, y)) {
            return true;
        }

        return Calculus.currentNumberSystem().compare(x, y) == 0;
    }

}
